# Load Required Packages: to be increased over the course
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("effects","FactoMineR","car", "factoextra","RColorBrewer","ggplot2","dplyr","ggmap","ggthemes","knitr", "lmtest","effects", "statmod", "DescTools","ResourceSelection","chemometrics","missMDA")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(requiredPackages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
load("~/GitHub/adei/adei/deliverable3/5000cars_clean.RData")
# 80% train sample and 20% test sample
llwork <- sample(1:nrow(df),round(0.80*nrow(df),0))
dfall<-df
df_train <- dfall[llwork,]
df_test <-dfall[-llwork,]
vars_con
ll<-which(df_train$tax==0);ll
df$tax[ll]<-0.5
m1<-glm(Audi~price+mileage+tax+mpg+years_after_sell,family="binomial",data=df_train)
summary(m1)
vif(m1)
m2 <- glm(Audi~poly(price, 2)+poly(mileage,2)+poly(tax,2)+poly(mpg,2)+poly(years_after_sell,2),family="binomial",data=df_train)
anova(m1,m2, test = "LR")
m3<-glm(Audi~poly(price,2)+poly(mileage,2)+poly(tax,2)+poly(mpg,2)+poly(years_after_sell,2),family="binomial",data=df_train[!df_train$mout=="MvOut.Yes",]) #3892.1 antes 3891.3 ahora AIC 3913.3, 3908.113
anova(m3, m2, test="LR") #para nada significante la diferencia d variacion, veremos como lo deja el step
m4 <- step(m3)
summary(m4)
anova(m4, m3, test="LR")
m5 <- glm(formula = Audi ~ poly(price, 2) + poly(mileage, 2) + tax + mpg, family = "binomial", data = df_train[!df_train$mout == "MvOut.Yes",])
summary(m5)
anova(m5, m4, test="LR")
df_train$engineSize_f <- as.numeric(levels(df_train$engineSize))[df_train$engineSize]
par(mfrow=c(1,1))
hist(df_train$engineSize_f)
quantile(df_train$engineSize_f, c(0.3333333,0.6666666,1))
df_train$engineSize_f <- factor(cut(df_train$engineSize_f, breaks = c(0,1.4,2,10)))
df_test$engineSize_f <- as.numeric(levels(df_test$engineSize))[df_test$engineSize]
df_test$engineSize_f <- factor(cut(df_test$engineSize_f, breaks =  c(0,1.4,2,10)))
table(df_train$engineSize_f)
m6 <- update(m5, ~.+fuelType+transmission+engineSize_f,data=df_train[!df_train$mout=="YesMOut",])
vif(m6)
summary(m6)
Anova(m6, test="LR")
anova(m6, m5, test="LR")
m5 <- glm(formula = Audi ~ poly(price, 2) + poly(mileage, 2) + tax + mpg, family = "binomial", data = df_train[!df_train$mout == "MvOut.Yes",])
m6 <- update(m5, ~.+fuelType+transmission+engineSize_f,data=df_train[!df_train$mout=="YesMOut",])
anova(m6, m5, test="LR")
m7 <- update(m6, ~.*(fuelType+transmission+engineSize_f)^2,data=df_train[!df_train$mout=="YesMOut",])
m8<- step(m7)
waldtest(m8, m7, test="Chisq")
anova( m8, m7, test="Chisq")
m9 <- glm(formula = Audi ~ poly(price, 2) + poly(mileage, 2) + tax + mpg + fuelType + transmission + engineSize_f + fuelType:transmission + poly(price, 2):fuelType + poly(price, 2):engineSize_f + poly(mileage, 2):fuelType + poly(mileage, 2):transmission + poly(mileage, 2):engineSize_f + tax:engineSize_f + mpg:transmission + poly(price, 2):fuelType:transmission, family = "binomial", data = df_train[!df_train$mout == "YesMOut", ])
summary(m9)
anova(m8, m7, test="Chisq")
summary(m7)
summary(m8)
m9 <- glm(formula = Audi ~ poly(price, 2) + poly(mileage, 2) + tax + mpg + fuelType + transmission + engineSize_f + fuelType:transmission + poly(price, 2):fuelType + poly(price, 2):engineSize_f + poly(mileage, 2):fuelType + poly(mileage, 2):transmission + poly(mileage, 2):engineSize_f + tax:engineSize_f + mpg:transmission + poly(price, 2):fuelType:transmission, family = "binomial", data = df_train[!df_train$mout == "YesMOut", ])
summary(m9)
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
load("~/GitHub/adei/adei/deliverable3/5000cars_clean.RData")
# Load Required Packages: to be increased over the course
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("effects","FactoMineR","car", "factoextra","RColorBrewer","ggplot2","dplyr","ggmap","ggthemes","knitr", "lmtest","effects", "statmod", "DescTools","ResourceSelection","chemometrics","missMDA")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(requiredPackages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
# 80% train sample and 20% test sample
llwork <- sample(1:nrow(df),round(0.80*nrow(df),0))
dfall<-df
df_train <- dfall[llwork,]
df_test <-dfall[-llwork,]
vars_con
ll<-which(df_train$tax==0);ll
df$tax[ll]<-0.5
m1<-glm(Audi~price+mileage+tax+mpg+years_after_sell,family="binomial",data=df_train)
summary(m1)
vif(m1)
vif(m1)
marginalModelPlots(m1)
library(effects)
plot(allEffects(m1))
crPlots(m1,id=list(method=cooks.distance(m1),n=5))
m2 <- glm(Audi~poly(price, 2)+poly(mileage,2)+poly(tax,2)+poly(mpg,2)+poly(years_after_sell,2),family="binomial",data=df_train)
summary(m2)
anova(m2, m1, test="LR")
AIC(m1,m2)
m3<-glm(Audi~poly(price,2)+poly(mileage,2)+poly(tax,2)+poly(mpg,2)+poly(years_after_sell,2),family="binomial",data=df_train[!df_train$mout=="MvOut.Yes",])
summary(m3)
m3<-glm(Audi~poly(price,2)+poly(mileage,2)+poly(tax,2)+poly(mpg,2)+poly(years_after_sell,2),family="binomial",data=df_train[!df_train$mout=="MvOut.Yes",])
summary(m3)
summary(m2)
summary(m3)
anova(m3, m2, test="LR")
AIC(m3, m2, m1)
AIC(m1, m2, m3)
Anova(m3, test="LR")
vif(m3)
m4 <- step(m3)
summary(m4)
# Load Required Packages: to be increased over the course
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("effects","FactoMineR","car", "factoextra","RColorBrewer","ggplot2","dplyr","ggmap","ggthemes","knitr", "lmtest","effects", "statmod", "DescTools","ResourceSelection","chemometrics","missMDA")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(requiredPackages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
# Clear plots
if(!is.null(dev.list())) dev.off()
# Clean workspace
rm(list=ls())
setwd("C:/Users/TOREROS-II/Documents/GitHub/adei/adei/deliverable3/binary target")
filepath<-"E:/Docencia_UPC/GEI-ADEI/Lab 10/"
load(paste0(filepath,"MyOldCars-1000Clean.RData"))
load("~/GitHub/adei/adei/deliverable3/5000cars_clean.RData")
# 80% train sample and 20% test sample
llwork <- sample(1:nrow(df),round(0.80*nrow(df),0))
dfall<-df
df_train <- dfall[llwork,]
df_test <-dfall[-llwork,]
vars_con
ll<-which(df_train$tax==0);ll
df$tax[ll]<-0.5
m1<-glm(Audi~price+mileage+tax+mpg+years_after_sell,family="binomial",data=df_train)
summary(m1)
vif(m1)
residualPlots(m1,id=list(method=cooks.distance(m1),n=10))
residualPlots(m1,id=list(method=cooks.distance(m1),n=10))
m2 <- glm(Audi~poly(price, 2)+poly(mileage,2)+poly(tax,2)+poly(mpg,2)+poly(years_after_sell,2),family="binomial",data=df_train)
summary(m2)
m3<-glm(Audi~poly(price,2)+poly(mileage,2)+poly(tax,2)+poly(mpg,2)+poly(years_after_sell,2),family="binomial",data=df_train[!df_train$mout=="MvOut.Yes",])
summary(m3)
m4 <- step(m3)
summary(m4)
m5 <- glm(formula = Audi ~ poly(price, 2) + poly(mileage, 2) + tax + mpg, family = "binomial", data = df_train[!df_train$mout == "MvOut.Yes",])
summary(m5)
df_train$engineSize_f <- as.numeric(levels(df_train$engineSize))[df_train$engineSize]
par(mfrow=c(1,1))
hist(df_train$engineSize_f)
quantile(df_train$engineSize_f, c(0.3333333,0.6666666,1))
df_train$engineSize_f <- factor(cut(df_train$engineSize_f, breaks = c(0,1.6,2,10)))
df_test$engineSize_f <- as.numeric(levels(df_test$engineSize))[df_test$engineSize]
df_test$engineSize_f <- factor(cut(df_test$engineSize_f, breaks =  c(0,1.6,2,10)))
table(df_train$engineSize_f)
m6 <- update(m5, ~.+fuelType+transmission+engineSize_f,data=df_train[!df_train$mout=="MvOut.Yes",])
vif(m6)
summary(m6)
m7 <- update(m6, ~.*(fuelType+transmission+engineSize_f)^2,data=df_train[!df_train$mout == "MvOut.Yes",])
summary(m7)
m8<- step(m7)
summary(m8)
anova(m8, m7, test="Chisq")
AIC(m1, m2, m3, m4, m5, m6, m7, m8)
m9 <- glm(formula = Audi ~ poly(price, 2) + poly(mileage, 2) + tax +
mpg + fuelType + transmission + engineSize_f + fuelType:transmission +
fuelType:engineSize_f + poly(price,
2):fuelType + poly(mileage,
2):fuelType + poly(mileage, 2):engineSize_f + tax:fuelType +
tax:engineSize_f + mpg:fuelType + mpg:transmission +
poly(price, 2):fuelType:engineSize_f + poly(mileage, 2):fuelType:engineSize_f +
mpg:fuelType:engineSize_f, family = "binomial", data = df_train[!df_train$mout ==
"MvOut.Yes",])
summary(m9)
Anova(m9, test="LR")
anova(m9, m8, test="Chisq")
View(df_train)
dfwork <- df_train[!df_train$mout=="MvOut.Yes",]
Boxplot(abs(rstudent(m9)))
llres <- which(abs(rstudent(m9))>2.75);llres
llres <- which(abs(rstudent(m9))>2.6);llres
Boxplot(cooks.distance(m9))
llout<-which(abs(cooks.distance(m9))>5000);llout
llrem<-unique(c(llout,llres));llrem
m10<- glm(formula = Audi ~ poly(price, 2) + poly(mileage, 2) + tax +
mpg + fuelType + transmission + engineSize_f + fuelType:transmission +
fuelType:engineSize_f + poly(price,
2):fuelType + poly(mileage,
2):fuelType + poly(mileage, 2):engineSize_f + tax:fuelType +
tax:engineSize_f + mpg:fuelType + mpg:transmission +
poly(price, 2):fuelType:engineSize_f + poly(mileage, 2):fuelType:engineSize_f +
mpg:fuelType:engineSize_f, family = "binomial", data=dfwork[-llrem,])
summary(m10)
residualPlots(m1,id=list(method=cooks.distance(m1),n=10))
avPlots(m10)
crPlots(m10)
influencePlot(m10)
outlierTest(m10)
# H0: Model fits data
pchisq(m10$null.deviance-m10$deviance, m10$df.null-m10$df.residual, lower.tail = FALSE)
X2m10<-sum((resid(m10,"pearson")^2));X2m10
1-pchisq( X2m10, m10$df.res)
library(DescTools)
PseudoR2(m10, which='all')
# Sheather
1 - (m10$deviance / m10$null.deviance)
# McFadden
1-(as.numeric(logLik(m10))/as.numeric(logLik(m0)))
library(ResourceSelection)
pred_test <- predict(m10, newdata=df_test, type="response")
ht <- hoslem.test(df_test$Audi, pred_test)
ht
cbind(ht$observed, ht$expected)
ht
pred_test <- predict(m10, newdata=df_test, type="response")
ht <- hoslem.test(df_test$Audi, pred_test)
ht
ht <- hoslem.test(df_test$Audi, pred_test); ht
cbind(ht$observed, ht$expected)
ht <- hoslem.test(df_test$Audi, fitted(m10)); ht
ht <- hoslem.test(df_test$Audi, fitted(m10)); ht
ht <- hoslem.test(df_test$Audi, fitted(m10), g = 10); ht
ht <- hoslem.test(m10$y, fitted(m10), g = 10); ht
pred_test <- predict(m10, newdata=df_test, type="response")
ht <- hoslem.test(df_test$Audi, pred_test); ht
cbind(ht$observed, ht$expected)
library("ROCR")
library("AUC")
dadesroc<-prediction(pred_test,df_test$Audi)
par(mfrow=c(1,2))
performance(dadesroc,"auc",fpr.stop=0.05)
plot(performance(dadesroc,"err"))
par(mfrow=c(1,1))
plot(performance(dadesroc,"tpr","fpr"))
abline(0,1,lty=2)
roc(pred_test,df_test$Audi)
??roc
library("pROC")
library(pROC)
installed.packages(pROC)
installed.packages("pROC")
library(pROC)
library("pROC")
install.packages("pROC")
library(pROC)
library("pROC")
library("randomForest")
install.packages("randomForest")
library("randomForest")
install.packages("randomForest")
library("randomForest")
library("randomForest")
install.packages("randomForest")
roc(pred_test,df_test$Audi)
roc(pred_test,df_test$Audi)
roc(df_test$Audi, m10$fitted.values, plot = "TRUE")
roc(df_test$Audi, pred_test, plot = TRUE, legacy.axes = TRUE, percent = TRUE, xlab="False Positive Percentage", ylab="True Positive Percentage")
par(pty = "s")
roc(df_test$Audi, pred_test, plot = TRUE, legacy.axes = TRUE, percent = TRUE, xlab="False Positive Percentage", ylab="True Positive Percentage")
roc.info <- roc(df_test$Audi, pred_test, legacy.axes = TRUE)
roc.df <- data.frame(
tpp=roc.info$sensitivities*100,
fpp=(1-roc.info$sensitivities)*100,
thresholds=roc.info$thresholds
)
head(roc.df)
roc.df
tail(roc.df)
roc(df_test$Audi, pred_test, plot = TRUE, legacy.axes = TRUE, percent = TRUE, xlab="False Positive Percentage", ylab="True Positive Percentage", print.auc = TRUE)
roc(df_test$Audi, pred_test, plot = TRUE, legacy.axes = TRUE, percent = TRUE, col = "#377eb8", xlab="False Positive Percentage", ylab="True Positive Percentage", print.auc = TRUE)
pred_test_m1 <- predict(m1, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m1, percent = TRUE, col = "#4daf4a", print.auc = TRUE, add = TRUE, print.auc.y = 40)
pred_test_m2 <- predict(m2, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m2, percent = TRUE, col = "#ff0000", print.auc = TRUE, add = TRUE, print.auc.y = 35)
plot.roc(df_test$Audi, pred_test_m1, percent = TRUE, col = "#4daf4a", print.auc = TRUE, add = TRUE, print.auc.y = 45)
plot.roc(df_test$Audi, pred_test_m2, percent = TRUE, col = "#ff0000", print.auc = TRUE, add = TRUE, print.auc.y = 40)
roc(df_test$Audi, pred_test, plot = TRUE, legacy.axes = TRUE, percent = TRUE, col = "#377eb8", xlab="False Positive Percentage", ylab="True Positive Percentage", print.auc = TRUE)
pred_test_m1 <- predict(m1, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m1, percent = TRUE, col = "#4daf4a", print.auc = TRUE, add = TRUE, print.auc.y = 45)
pred_test_m2 <- predict(m2, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m2, percent = TRUE, col = "#ff0000", print.auc = TRUE, add = TRUE, print.auc.y = 40)
roc(df_test$Audi, pred_test, plot = TRUE, legacy.axes = TRUE, percent = TRUE, col = "#377eb8", xlab="False Positive Percentage", ylab="True Positive Percentage", print.auc = TRUE)
pred_test_m9 <- predict(m9, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m9, percent = TRUE, col = "#4daf4a", print.auc = TRUE, add = TRUE, print.auc.y = 45)
pred_test_m8 <- predict(m8, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m8, percent = TRUE, col = "#ff0000", print.auc = TRUE, add = TRUE, print.auc.y = 40)
pred_test_m7 <- predict(m7, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m7, percent = TRUE, col = "#00EFFF", print.auc = TRUE, add = TRUE, print.auc.y = 35)
pred_test_m6 <- predict(m6, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m6, percent = TRUE, col = "#F700FF", print.auc = TRUE, add = TRUE, print.auc.y = 30)
pred_test_m5 <- predict(m5, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m5, percent = TRUE, col = "#FFCD00", print.auc = TRUE, add = TRUE, print.auc.y = 25)
pred_test_m4 <- predict(m4, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m4, percent = TRUE, col = "#00FF89", print.auc = TRUE, add = TRUE, print.auc.y = 20)
pred_test_m3 <- predict(m3, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m3, percent = TRUE, col = "#00BCFF", print.auc = TRUE, add = TRUE, print.auc.y = 15)
pred_test_m2 <- predict(m2, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m2, percent = TRUE, col = "#9A00FF", print.auc = TRUE, add = TRUE, print.auc.y = 10)
pred_test_m1 <- predict(m1, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m1, percent = TRUE, col = "#D5FF00", print.auc = TRUE, add = TRUE, print.auc.y = 5)
pred_test_m2 <- predict(m2, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m2, percent = TRUE, col = "#00FF9A", print.auc = TRUE, add = TRUE, print.auc.y = 40)
legend("bottomright", legend=c("m10","m9","m8","m7","m6","m5","m4","m3","m2","m1"), col=c("#377eb8","#4daf4a","#ff0000","#00EFFF","#F700FF","#FFCD00","#00FF89","#00BCFF","#9A00FF","#D5FF00"))
par(pty = "s")
roc(df_test$Audi, pred_test, plot = TRUE, legacy.axes = TRUE, percent = TRUE, col = "#377eb8", xlab="False Positive Percentage", ylab="True Positive Percentage", print.auc = TRUE)
pred_test_m9 <- predict(m9, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m9, percent = TRUE, col = "#4daf4a", print.auc = TRUE, add = TRUE, print.auc.y = 45)
pred_test_m8 <- predict(m8, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m8, percent = TRUE, col = "#ff0000", print.auc = TRUE, add = TRUE, print.auc.y = 40)
pred_test_m7 <- predict(m7, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m7, percent = TRUE, col = "#00EFFF", print.auc = TRUE, add = TRUE, print.auc.y = 35)
pred_test_m6 <- predict(m6, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m6, percent = TRUE, col = "#F700FF", print.auc = TRUE, add = TRUE, print.auc.y = 30)
pred_test_m5 <- predict(m5, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m5, percent = TRUE, col = "#FFCD00", print.auc = TRUE, add = TRUE, print.auc.y = 25)
pred_test_m4 <- predict(m4, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m4, percent = TRUE, col = "#00FF89", print.auc = TRUE, add = TRUE, print.auc.y = 20)
pred_test_m3 <- predict(m3, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m3, percent = TRUE, col = "#00BCFF", print.auc = TRUE, add = TRUE, print.auc.y = 15)
pred_test_m2 <- predict(m2, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m2, percent = TRUE, col = "#9A00FF", print.auc = TRUE, add = TRUE, print.auc.y = 10)
pred_test_m1 <- predict(m1, newdata=df_test, type="response")
plot.roc(df_test$Audi, pred_test_m1, percent = TRUE, col = "#D5FF00", print.auc = TRUE, add = TRUE, print.auc.y = 5)
legend("bottomright", legend=c("m10","m9","m8","m7","m6","m5","m4","m3","m2","m1"), col=c("#377eb8","#4daf4a","#ff0000","#00EFFF","#F700FF","#FFCD00","#00FF89","#00BCFF","#9A00FF","#D5FF00"))
legend("bottomright", legend=c("m10","m9"), col=c("#377eb8","#4daf4a"))
legend("bottomright", legend=c("m10","m9"), col=c("#377eb8","#4daf4a"), lwd=4)
legend("bottomright", legend=c("m10","m9"), col=c("#377eb8","#4daf4a"), lwd=1)
legend("bottomright", legend=c("m10","m9"), col=c("#377eb8","#4daf4a"), lwd=4)
legend("bottomright", legend=c("m10","m9","m8","m7","m6","m5","m4","m3","m2","m1"), col=c("#377eb8","#4daf4a","#ff0000","#00EFFF","#F700FF","#FFCD00","#00FF89","#00BCFF","#9A00FF","#D5FF00"), lwd=4)
roc.info <- roc(df_test$Audi, pred_test, legacy.axes = TRUE)
roc.df <- data.frame(
tpp=roc.info$sensitivities*100,
fpp=(1-roc.info$sensitivities)*100,
thresholds=roc.info$thresholds
)
roc.df
# Confusion Table Analysis
treshold <- 0.5
audi.est <- ifelse(pred_test<treshold,0,1)
tt<-table(audi.est,df_test$Audi);tt
100*sum(diag(tt))/sum(tt)
tt<-table(audi.est,df_test$Audi);tt
roc.df <- data.frame(
tpp=roc.info$sensitivities*100,
fpp=(1-roc.info$sensitivities)*100,
thresholds=roc.info$thresholds
)
roc.df[roc.df$tpp > 60 & roc.df$tpp < 80]
roc.df[roc.df$tpp > 60 & roc.df$tpp < 80]
roc.df[roc.df$tpp > 60 & roc.df$tpp < 80,]
# Confusion Table Analysis
treshold <- 0.2056101
audi.est <- ifelse(pred_test<treshold,0,1)
tt<-table(audi.est,df_test$Audi);tt
# Confusion Table Analysis
treshold <- 0.5
# Confusion Table Analysis
treshold <- 0.6
# Confusion Table Analysis
treshold <- 0.7
audi.est <- ifelse(pred_test<treshold,0,1)
tt<-table(audi.est,df_test$Audi);tt
# Confusion Table Analysis
treshold <- 0.5
audi.est <- ifelse(pred_test<treshold,0,1)
tt<-table(audi.est,df_test$Audi);tt
100*sum(diag(tt))/sum(tt)
# Model na?ve
prob.audi <- m3_1$fit
audi.est <- ifelse(prob.audi<0.5,0,1)
tt<-table(audi.est,df_test$Audi);tt
100*tt[1,1]/sum(tt)
