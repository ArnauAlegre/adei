k5 <- kmeans(dcon_sam,5)
bank.clusters <- k5$cluster
fviz_cluster(list(data=dcon_sam, cluster=bank.clusters),geom = "point", ggtheme = theme_bw())
round(calinhara(dcon_sam,bank.clusters, cn=max(bank.clusters)),digits=2)
dist_mat <- dist(dcon_sam)
round(calinhara(dist_mat,bank.clusters, cn=max(bank.clusters)),digits=2)
round(calinhara(dist_mat,bank.clusters, cn=max(bank.clusters)),digits=2)
set.seed(123)
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(dcon, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
library(purrr)
library(purrr)
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
fviz_nbclust(dcon, kmeans, method = "wss")
library(factoextra)
fviz_nbclust(dcon, kmeans, method = "wss")
# Chunk 19
boxplot(df$tax, main="Boxplot of tax", col="darkslateblue")
#df$year <- factor(df$year)
#We can see that there are outliers in the dataset, so we will treat them.
summary(df$tax)
var_out<-calcQ(df$tax)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
llout<-which((df$tax <= var_out$souti & df$tax >= var_out$souts))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="tax")]<-length(llout)
df$tax[llout, "tax"] <- NA
summary(df$tax)
Boxplot(df$tax)
quantile(df$tax,seq(0,1,0.25),na.rm=TRUE)
quantile(df$tax,seq(0,1,0.1),na.rm=TRUE)
# df$aux<-factor(cut(df$tax,breaks=quantile(df$tax,seq(0,1,0.25),na.rm=TRUE),include.lowest = T )) # Does not work
df$aux<-factor(cut(df$tax,breaks=c(0, 125, 145, 570),include.lowest = T ))
summary(df$aux)
tapply(df$tax,df$aux,median)
df$f.tax<-factor(cut(df$tax,breaks=c(0, 125, 145, 570),include.lowest = T ))
levels(df$f.tax)<-paste("f.tax-",levels(df$f.tax),sep="")
table(df$f.tax,useNA="always")
# Chunk 20
#Outliers are replaced by NA
boxplot(df$mpg)
var_out<-calcQ(df$mpg)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
llout_mpg<-which((df$mpg<var_out$souti)|(df$mpg>var_out$souts))
iouts[llout_mpg]<-iouts[llout_mpg]+1
jouts[which(colnames(df)=="mpg")]<-length(llout)
df[llout_mpg,"mpg"] <- NA
# Chunk 21
df$engineSize <- factor(df$engineSize)
levels(df$engineSize)
df[which(df[,"engineSize"]==0),]
# It is a quantitive variable  Non-possible values will be recoded to NA
sel<-which(df$engineSize==0)
ierrs[sel]<-ierrs[sel]+1 #Vector of errors per individual update
sel                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# We should update jerrs vector: errors per variable
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
# NA assignment for forward imputation:
df[sel,"engineSize"]<-NA
# Chunk 22
df$VendorID <- factor(df$VendorID)
levels(df$VendorID)
df$VendorID <- factor(df$VendorID,levels = c("1", "2"), labels=c("CMT", "Verifone"))
df$RateCodeID <- factor(df$RateCodeID)
levels(df$RateCodeID)
df$RateCodeID <- factor(df$RateCodeID,levels = c("1", "2", "3", "4", "5", "6"), labels=c("Std_rate", "JFK",
"Newark", "Nassau/Wetches",
"Negociated_fare", "Group_ride"))
table(df$RateCodeID)
df$Store_and_fwd_flag<-factor(df$Store_and_fwd_flag)
levels(df$Store_and_fwd_flag)
df$Store_and_fwd_flag <- factor(df$Store_and_fwd_flag,levels = c("N", "Y"), labels=c("store&forward_trip", "not_store&forward_trip"))
df$Payment_type<- factor(df$Payment_type,levels = c("1", "2", "3", "4", "5", "6"), labels=c("Credit_card", "Cash", "No_charge", "Dispute", "Unknown", "Voided_trip"))
table(df$Payment_type)
df$Trip_type <- factor(df$Trip_type,levels = c("1", "2"), labels=c("Street-hail", "Dispatch"))
table(df$Trip_type)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
setwd("C:/Users/Arnau/Desktop/adei/deliverable1")
# Load Required Packages
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("missMDA","chemometrics","mvoutlier","effects","FactoMineR","car", "factoextra","RColorBrewer","dplyr","ggmap","ggthemes","knitr")
missingPackages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(missingPackages)) install.packages(missingPackages)
lapply(requiredPackages, require, character.only = TRUE)
# Chunk 3
if(!is.null(dev.list())) dev.off()  # Clear plots
rm(list=ls())                       # Clean workspace
# Chunk 4
{r}
# Lecture of DataFrames:
df1 <- read.table("audi.csv",header=T, sep=",")
df1$manufacturer <- "Audi"
df2 <- read.table("bmw.csv",header=T, sep=",")
df2$manufacturer <- "BMW"
df3 <- read.table("merc.csv",header=T, sep=",")
df3$manufacturer <- "Mercedes"
df4 <- read.table("vw.csv",header=T, sep=",")
df4$manufacturer <- "VW"
# Union by row:
df <- rbind(df1,df2,df3,df4)
#write.csv(df,"C:/Users/Arnau/Documents/GitHub/adei/deliverable1/sample_5000.csv", row.names = TRUE, na="NA")
# Chunk 5
filepath<-"C:/Users/Arnau/Desktop/adei/deliverable1"
df<-read.table(paste0(filepath,"/sample_5000.csv"),header=T, sep=",")[c(-1)]
# dim(df)       # Displays the sample size
# names(df)     # Displays the names of the sample variables
# summary(df)
# Chunk 6
set.seed(123456)
sam<-as.vector(sort(sample(1:nrow(df),5000)))
# Chunk 7
head(df)
df<-df[sam,]
rownames(df) <- 1:nrow(df) #rename row id's from 1 to nrows
summary(df)
# Chunk 8
calcQ <- function(x) { # Function to calculate the different quartiles
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr )
}
countNA <- function(x) { # Function to count the NA values
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i)
}
countX <- function(x,X) { # Function to count a specific number of appearences
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i)
}
# Chunk 9
imis<-rep(0,nrow(df))  # rows - cars
jmis<-rep(0,2*ncol(df))  # columns - variables
mis1<-countNA(df)
mis1$mis_ind # Number of missings for the current set of cars (observations)
mis1$mis_col # Number of missings for the current set of variables
iouts<-rep(0,nrow(df))  # rows - cars
jouts<-rep(0,ncol(df))  # columns - variables
ierrs<-rep(0,nrow(df))  # rows - cars
jerrs<-rep(0,ncol(df))  # columns - variables
# Chunk 10
df$model<-factor(paste0(df$manufacturer,"-",df$model))
#levels(df$model)
summary(df$model)
#Too many models to represent them in a graph
#The is not missing data or erroneous data, so we will not make any change in the model column
# Chunk 11
df$years_after_sell <-  2022 - df$year
boxplot(df$years_after_sell, main="Boxplot of years after sell", col="darkslateblue")
#We can see that there are superior outliers in the dataset, so we will treat them.
summary(df$years_after_sell)
var_out<-calcQ(df$years_after_sell)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
llout<-which((df$years_after_sell >= var_out$souts))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="years_after_sell")]<-length(llout)
#We will group all the superior outliers into one variable
df[which(df$years_after_sell >= var_out$souts),"years_after_sell"] <- paste0(var_out$souts, " or more")
barplot(table(df$years_after_sell), main="Barplot of years after sell", col="darkslateblue")
# Chunk 12
boxplot(df$year, main="Boxplot of sold year", col="darkslateblue")
#df$year <- factor(df$year)
#We can see that there are outliers in the dataset, so we will treat them.
summary(df$year)
var_out<-calcQ(df$year)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
llout<-which((df$year <= var_out$souti))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="year")]<-length(llout)
#We will group all the inferior outliers into one variable
df[which(df$year<=var_out$souti),"year"] <- paste0(var_out$souti, " or before")
barplot(table(df$year), main="Barplot of sold year", col="darkslateblue")
# Chunk 13
summary(df$price)
sel<-which(df$price <= 0)
ierrs[sel] <- ierrs[sel] + 1
jerrs[which(colnames(df)=="price")] <- length(sel)
#We will delete the rows with errors in the price because we cannot make imputations for our target variable.
df <- df[-sel, ]
# Chunk 14
boxplot(df$price)
var_out<-calcQ(df$price)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
#We can see there are outliers in the dataset so we will treat them.
#As this is the response variable, we will delete the outlier rows because we cannot delete the value and impute it.
llout_price<-which((df$price > var_out$souts) | (df$price < var_out$souti ))
#iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="price")]<-length(llout_price)
df <- df[-llout_price, ]
# Chunk 15
df$price_type <- df$price
df$price_type[which(df$price >= var_out$min & df$price_type < var_out$q1)] <- "super cheap"
df$price_type[which(df$price >= var_out$q1 & df$price_type < var_out$q2)] <- "cheap"
df$price_type[which(df$price >= var_out$q2 & df$price_type < var_out$q3)] <- "expensive"
df$price_type[which(df$price >= var_out$q3 & df$price_type < var_out$mouts)] <- "very expensive"
df$price_type[which(df$price >= var_out$mouts )] <- "extremely expensive"
table(df$price_type)
# Chunk 16
df$transmission <- factor( df$transmission )
levels( df$transmission )
df$transmission <- factor( df$transmission, levels = c("Manual","Semi-Auto","Automatic"),labels = paste0("f.Trans-",c("Manual","SemiAuto","Automatic")))
#All transmission not listed above have been replaced as NA
# Chunk 17
boxplot(df$mileage)
var_out<-calcQ(df$mileage)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
llout_mil<-which((df$mileage<var_out$souti)|(df$mileage>var_out$souts))
iouts[llout_mil]<-iouts[llout_mil]+1
df[llout_mil,"mileage"] <- NA
# Chunk 18
df$fuelType <- factor(df$fuelType)
levels(df$fuelType)
df$fuelType <- factor( df$fuelType, levels = c("Diesel","Petrol","Hybrid"), labels = paste0("f.Fuel-",c("Diesel","Petrol","Hybrid")))
# Chunk 19
boxplot(df$tax, main="Boxplot of tax", col="darkslateblue")
#df$year <- factor(df$year)
#We can see that there are outliers in the dataset, so we will treat them.
summary(df$tax)
var_out<-calcQ(df$tax)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
llout<-which((df$tax <= var_out$souti & df$tax >= var_out$souts))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="tax")]<-length(llout)
df$tax[llout, "tax"] <- NA
summary(df$tax)
Boxplot(df$tax)
quantile(df$tax,seq(0,1,0.25),na.rm=TRUE)
quantile(df$tax,seq(0,1,0.1),na.rm=TRUE)
# df$aux<-factor(cut(df$tax,breaks=quantile(df$tax,seq(0,1,0.25),na.rm=TRUE),include.lowest = T )) # Does not work
df$aux<-factor(cut(df$tax,breaks=c(0, 125, 145, 570),include.lowest = T ))
summary(df$aux)
tapply(df$tax,df$aux,median)
df$f.tax<-factor(cut(df$tax,breaks=c(0, 125, 145, 570),include.lowest = T ))
levels(df$f.tax)<-paste("f.tax-",levels(df$f.tax),sep="")
table(df$f.tax,useNA="always")
# Chunk 20
#Outliers are replaced by NA
boxplot(df$mpg)
var_out<-calcQ(df$mpg)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
llout_mpg<-which((df$mpg<var_out$souti)|(df$mpg>var_out$souts))
iouts[llout_mpg]<-iouts[llout_mpg]+1
jouts[which(colnames(df)=="mpg")]<-length(llout)
df[llout_mpg,"mpg"] <- NA
# Chunk 21
df$engineSize <- factor(df$engineSize)
levels(df$engineSize)
df[which(df[,"engineSize"]==0),]
# It is a quantitive variable  Non-possible values will be recoded to NA
sel<-which(df$engineSize==0)
ierrs[sel]<-ierrs[sel]+1 #Vector of errors per individual update
sel                 #### sel contains the rownames of the individuals with "0"
#                        as  value for engineSize
# We should update jerrs vector: errors per variable
# df[sel,"engineSize"]<-3    # non-possible values are replaced by NA, missing value symbol in R
# NA assignment for forward imputation:
df[sel,"engineSize"]<-NA
# Chunk 22
df$VendorID <- factor(df$VendorID)
levels(df$VendorID)
df$VendorID <- factor(df$VendorID,levels = c("1", "2"), labels=c("CMT", "Verifone"))
df$RateCodeID <- factor(df$RateCodeID)
levels(df$RateCodeID)
df$RateCodeID <- factor(df$RateCodeID,levels = c("1", "2", "3", "4", "5", "6"), labels=c("Std_rate", "JFK",
"Newark", "Nassau/Wetches",
"Negociated_fare", "Group_ride"))
table(df$RateCodeID)
df$Store_and_fwd_flag<-factor(df$Store_and_fwd_flag)
levels(df$Store_and_fwd_flag)
df$Store_and_fwd_flag <- factor(df$Store_and_fwd_flag,levels = c("N", "Y"), labels=c("store&forward_trip", "not_store&forward_trip"))
df$Payment_type<- factor(df$Payment_type,levels = c("1", "2", "3", "4", "5", "6"), labels=c("Credit_card", "Cash", "No_charge", "Dispute", "Unknown", "Voided_trip"))
table(df$Payment_type)
df$Trip_type <- factor(df$Trip_type,levels = c("1", "2"), labels=c("Street-hail", "Dispatch"))
table(df$Trip_type)
Boxplot(df$tax)
boxplot(df$tax)
View(df)
View(df)
setwd("C:/Users/Arnau/Desktop/adei/deliverable1")
# Load Required Packages
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("missMDA","chemometrics","mvoutlier","effects","FactoMineR","car", "factoextra","RColorBrewer","dplyr","ggmap","ggthemes","knitr")
missingPackages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(missingPackages)) install.packages(missingPackages)
lapply(requiredPackages, require, character.only = TRUE)
if(!is.null(dev.list())) dev.off()  # Clear plots
rm(list=ls())                       # Clean workspace
{r}
# Lecture of DataFrames:
df1 <- read.table("audi.csv",header=T, sep=",")
df1$manufacturer <- "Audi"
df2 <- read.table("bmw.csv",header=T, sep=",")
df2$manufacturer <- "BMW"
df3 <- read.table("merc.csv",header=T, sep=",")
df3$manufacturer <- "Mercedes"
df4 <- read.table("vw.csv",header=T, sep=",")
df4$manufacturer <- "VW"
# Union by row:
df <- rbind(df1,df2,df3,df4)
#write.csv(df,"C:/Users/Arnau/Documents/GitHub/adei/deliverable1/sample_5000.csv", row.names = TRUE, na="NA")
filepath<-"C:/Users/Arnau/Desktop/adei/deliverable1"
df<-read.table(paste0(filepath,"/sample_5000.csv"),header=T, sep=",")[c(-1)]
# dim(df)       # Displays the sample size
# names(df)     # Displays the names of the sample variables
# summary(df)
set.seed(123456)
sam<-as.vector(sort(sample(1:nrow(df),5000)))
head(df)
df<-df[sam,]
rownames(df) <- 1:nrow(df) #rename row id's from 1 to nrows
summary(df)
calcQ <- function(x) { # Function to calculate the different quartiles
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr )
}
countNA <- function(x) { # Function to count the NA values
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i)
}
countX <- function(x,X) { # Function to count a specific number of appearences
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i)
}
imis<-rep(0,nrow(df))  # rows - cars
jmis<-rep(0,2*ncol(df))  # columns - variables
mis1<-countNA(df)
mis1$mis_ind # Number of missings for the current set of cars (observations)
mis1$mis_col # Number of missings for the current set of variables
iouts<-rep(0,nrow(df))  # rows - cars
jouts<-rep(0,ncol(df))  # columns - variables
ierrs<-rep(0,nrow(df))  # rows - cars
jerrs<-rep(0,ncol(df))  # columns - variables
{r}
# Lecture of DataFrames:
df1 <- read.table("audi.csv",header=T, sep=",")
df1$manufacturer <- "Audi"
df2 <- read.table("bmw.csv",header=T, sep=",")
df2$manufacturer <- "BMW"
df3 <- read.table("merc.csv",header=T, sep=",")
df3$manufacturer <- "Mercedes"
df4 <- read.table("vw.csv",header=T, sep=",")
df4$manufacturer <- "VW"
# Union by row:
df <- rbind(df1,df2,df3,df4)
#write.csv(df,"C:/Users/Arnau/Documents/GitHub/adei/deliverable1/sample_5000.csv", row.names = TRUE, na="NA")
df$model<-factor(paste0(df$manufacturer,"-",df$model))
#levels(df$model)
summary(df$model)
#Too many models to represent them in a graph
#The is not missing data or erroneous data, so we will not make any change in the model column
df$years_after_sell <-  2022 - df$year
boxplot(df$years_after_sell, main="Boxplot of years after sell", col="darkslateblue")
#We can see that there are superior outliers in the dataset, so we will treat them.
summary(df$years_after_sell)
var_out<-calcQ(df$years_after_sell)
abline(h=var_out$souts,col="red")
abline(h=var_out$souti,col="red")
llout<-which((df$years_after_sell >= var_out$souts))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="years_after_sell")]<-length(llout)
#We will group all the superior outliers into one variable
df[which(df$years_after_sell >= var_out$souts),"years_after_sell"] <- paste0(var_out$souts, " or more")
barplot(table(df$years_after_sell), main="Barplot of years after sell", col="darkslateblue")
inconsistencies <- imis+iouts+ierrs
inconsistencies
boxplot(inconsistencies)
imis
df$inconsistencies <- imis+iouts+ierrs
vars_quanti <- c(2,3,5,7,8,9,10)
res <- cor(df[,vars_quanti])
res <- cor(df[,vars_quanti])
vars_quanti <- c(2,3,5,7,8,9,12)
res <- cor(df[,vars_quanti])
round(res, 2)
library(corrplot)
corrplot(res)
res
res
vw_inconsists <- mean(df$inconsistencies, which[df$manufacturer=="VW"])
vw_inconsists <- mean(df$inconsistencies, which(df$manufacturer=="VW"))
vw_inconsists <- mean(df$inconsistencies[ which(df$manufacturer=="VW")])
audi_inconsis <- mean(df$inconsistencies[ which(df$manufacturer=="Audi")])
bmw_inconsis <- mean(df$inconsistencies[ which(df$manufacturer=="BMW")])
merc_inconsis <- mean(df$inconsistencies[ which(df$manufacturer=="Mercedes")])
barplot(vw_inconsists, audi_inconsis, bmw_inconsis, merc_inconsis)
df_aux$vw_inconsists <- mean(df$inconsistencies[ which(df$manufacturer=="VW")])
df_aux <- data.frame
df_aux <- data.frame()
df_aux$vw_inconsists <- mean(df$inconsistencies[ which(df$manufacturer=="VW")])
df_aux <- data.frame(vw_inconsists, audi_inconsis, bmw_inconsis, merc_inconsis)
View(df_aux)
View(df_aux)
barplot(df_aux)
barplot(table(df_aux))
df_aux <- data.frame()
df_aux$incons <- c(vw_inconsists, audi_inconsis, bmw_inconsis, merc_inconsis)
df_aux <- data.frame(incons)
df_aux <- data.frame("incons")
View(df_aux)
View(df_aux)
df_aux$incons <- c(vw_inconsists, audi_inconsis, bmw_inconsis, merc_inconsis)
df_aux <- data.frame(c("Audi", "VM", "MERC", "BMW"))
df_aux$incons <- c(vw_inconsists, audi_inconsis, bmw_inconsis, merc_inconsis)
barplot(table(df_aux))
barplot(table(df_aux$incons))
aux_table <- table(1,2,3)
aux_table
barplot(c(vw_inconsists, audi_inconsis, bmw_inconsis, merc_inconsis), names.arg = c("Audi", "VM", "Mercedes", "BMW"))
barplot(c(vw_inconsists, audi_inconsis, merc_inconsis, bmw_inconsis), names.arg = c("Audi", "VM", "Mercedes", "BMW"))
barplot(c(vw_inconsists, audi_inconsis, merc_inconsis, bmw_inconsis), names.arg = c("Audi", "VM", "Merc", "BMW"))
barplot(c(vw_inconsists, audi_inconsis, merc_inconsis, bmw_inconsis), names.arg = c("Audi", "VM", "Mercedes", "BMW"))
barplot(sort(c(vw_inconsists, audi_inconsis, merc_inconsis, bmw_inconsis)), names.arg = c("Audi", "VM", "Mercedes", "BMW"))
library(plyr)
importes <- sort(c(vw_inconsists, audi_inconsis, merc_inconsis, bmw_inconsis)
)
dataset <- ddply(dataset,.(grupo), transform, ranking2 = (seq_along(importes)))
View(df_aux)
View(df_aux)
df_aux <- data.frame(c("Audi", "VM", "MERC", "BMW"))
df_aux <- data.frame("modelo"=c("Audi", "VM", "MERC", "BMW"))
df_aux$incons <- c(vw_inconsists, audi_inconsis, bmw_inconsis, merc_inconsis)
df_aux<- ddply(df_aux,.(Modelo), transform, ranking2 = (seq_along(incons)))
df_aux <- data.frame("Modelo"=c("Audi", "VM", "MERC", "BMW"))
df_aux$incons <- c(vw_inconsists, audi_inconsis, bmw_inconsis, merc_inconsis)
df_aux<- ddply(df_aux,.(Modelo), transform, ranking2 = (seq_along(incons)))
df_aux<- ddply(df_aux,.(Modelo), transform, ranking2 = (sort(incons)))
barplot(sort(df_aux$incons))
barplot(sort(df_aux$incons))
barplot(sort(df_aux$incons))
barplot(sort(df_aux$incons), names_arg=df_aux$Model)
barplot(sort(df_aux$incons), names.arg=df_aux$Model)
barplot(sort(df_aux$incons), names.arg=df_aux$Model)
barplot(sort(df_aux$incons), names.arg=df_aux$Model)
df_aux<-sort_df(df_aux,vars=c("Modelo","incons"))
library(reshape)
install.packages("reshape")
library(reshape)
df_aux<-sort_df(df_aux,vars=c("Modelo","incons"))
df_aux<-sort_df(df_aux,vars=c("incons"))
df_aux[order(df_aux$incons)]
df_aux[order(df_aux$incons),]
df_aux<-df_aux[order(df_aux$incons),]
df_aux<-df_aux[order(df_aux$incons),]
df_aux[order(df_aux$incons),]
barplot(table(df_aux[order(df_aux$incons),]$incons))
barplot(table(df_aux[order(df_aux$incons),]))
df_aux2<-df_aux[order(df_aux$incons),]
View(df_aux2)
View(df_aux2)
barplot(table(df_aux2$incons))
barplot(table(df_aux2$incons), names.arg = df_aux2$Modelo)
df_aux2
barplot(table(df_aux2$incons), names.arg = df_aux2$Modelo)
hist(df_aux, main=paste("Histogram of"))
ggplot(df_aux)
ggplot(df_aux$Modelo)
ggplot(df_aux)
ggplot2(df_aux)
barplot(table(df_aux2$incons), names.arg = df_aux2$Modelo)
barplot(df_aux2$incons, names.arg = df_aux2$Modelo)
barplot(df_aux2$incons, names.arg = df_aux2$Modelo)
df_aux <- data.frame("Modelo"=c("Audi", "VM", "Mercedes", "BMW"))
df_aux$incons <- c(vw_inconsists, audi_inconsis, bmw_inconsis, merc_inconsis)
df_aux2<-df_aux[order(df_aux$incons),]
barplot(df_aux2$incons, names.arg = df_aux2$Modelo)
