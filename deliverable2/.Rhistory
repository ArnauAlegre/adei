library(knitr)
library(formatR)
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=70),tidy=TRUE)
#setwd("C:/Users/TOREROS-II/Documents/GitHub/adei/deliverable2")
setwd("C:/Users/Arnau/Desktop/adei/deliverable2")
# Load Required Packages
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("missMDA","chemometrics","mvoutlier","effects","FactoMineR","car", "factoextra","RColorBrewer","dplyr","ggmap","ggthemes","knitr", "corrplot")
missingPackages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(missingPackages)) install.packages(missingPackages)
lapply(requiredPackages, require, character.only = TRUE)
#filepath<-"C:/Users/TOREROS-II/Documents/GitHub/adei/"
filepath <- "C:/Users/Arnau/Desktop/adei/"
df<-read.table(paste0(filepath,"/sample_5000.csv"),header=T, sep=",")[c(-1)]
calcQ <- function(x) { # Function to calculate the different quartiles
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr )
}
countNA <- function(x) { # Function to count the NA values
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i)
}
countX <- function(x,X) { # Function to count a specific number of appearences
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i)
}
jmis<-rep(0,2*ncol(df))  # columns - variables
mis1<-countNA(df)
#mis1$mis_ind   # Number of missings for the current set of cars (observations)
#mis1$mis_col   # Number of missings for the current set of variables
jouts<-rep(0,ncol(df))  # columns - variables
jerrs<-rep(0,ncol(df))  # columns - variables
sel<-which(df$price <= 0)
jerrs[which(colnames(df)=="price")] <- length(sel)
df <- df[which(df$price > 0), ]
var_out<-calcQ(df$price)
llout_price<-which((df$price > var_out$souts) | (df$price < var_out$souti ))
jouts[which(colnames(df)=="price")]<-length(llout_price)
df <- df[-llout_price, ]
imis<-rep(0,nrow(df))  # rows - cars
iouts<-rep(0,nrow(df))  # rows - cars
ierrs<-rep(0,nrow(df))  # rows - cars
df$model<-factor(paste0(df$manufacturer,"-",df$model))
var_out<-calcQ(df$year)
llout<-which((df$year <= var_out$souti))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="year")]<-length(llout)
df[llout,"year"] <- NA
df$price_type <- df$price
df$price_type[which(df$price >= var_out$min & df$price_type < var_out$q1)] <- "super cheap"
df$price_type[which(df$price >= var_out$q1 & df$price_type < var_out$q2)] <- "cheap"
df$price_type[which(df$price >= var_out$q2 & df$price_type < var_out$q3)] <- "expensive"
df$price_type[which(df$price >= var_out$q3 & df$price_type < var_out$mouts)] <- "very expensive"
df$price_type[which(df$price >= var_out$mouts )] <- "extremely expensive"
df$transmission <- factor( df$transmission )
df$transmission <- factor( df$transmission, levels = c("Manual","Semi-Auto","Automatic"),labels = paste0("f.Trans-",c("Manual","SemiAuto","Automatic")))
var_out<-calcQ(df$mileage)
llout_mil<-which((df$mileage<var_out$souti)|(df$mileage>var_out$souts))
iouts[llout_mil]<-iouts[llout_mil]+1
df[llout_mil,"mileage"] <- NA
df$fuelType <- factor(df$fuelType)
df$fuelType <- factor( df$fuelType, levels = c("Diesel","Petrol","Hybrid"), labels = paste0("f.Fuel-",c("Diesel","Petrol","Hybrid")))
var_out<-calcQ(df$tax)
llout<-which((df$tax <= var_out$souti & df$tax >= var_out$souts))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="tax")]<-length(llout)
df[llout, "tax"] <- NA
var_out<-calcQ(df$mpg)
llout_mpg<-which((df$mpg<var_out$souti)|(df$mpg>var_out$souts))
iouts[llout_mpg]<-iouts[llout_mpg]+1
jouts[which(colnames(df)=="mpg")]<-length(llout)
df[llout_mpg,"mpg"] <- NA
df$engineSize <- factor(df$engineSize)
sel<-which(df$engineSize==0)
ierrs[sel]<-ierrs[sel]+1 #Vector of errors per individual update
df[sel,"engineSize"]<-NA
library(missMDA)
vars_con<-c("year", "mileage", "tax", "mpg")
vars_res<-c("price", "Audi")
res.impca<-imputePCA(df[,vars_con],ncp=3)
df[,vars_con ]<-res.impca$completeObs
vars_dis<-c("model","transmission","fuelType","engineSize","manufacturer")
res.immca<-imputeMCA(df[,vars_dis],ncp=4)
df[ , vars_dis ]<-res.immca$completeObs
df$Audi<-ifelse(df$manufacturer == "Audi",1,0)
df$Audi<-factor(df$Audi,labels=c("No","Yes"))
df$years_after_sell <-  2022 - df$year
quants <- calcQ(df$tax)
df$f.tax<-factor(cut(df$tax, breaks=c(quants$min,quants$q1, quants$q2, quants$q3+10, quants$max), include.lowest=T))
df$f.mileage<-factor(cut(df$mileage,breaks=c(quantile(df$mileage,seq(0,1,0.25),na.rm=TRUE)),include.lowest = T ))
df$f.mpg<-factor(cut(df$mpg,breaks=c(quantile(df$mpg,seq(0,1,0.25),na.rm=TRUE)),include.lowest = T ))
df$f.year<-factor(cut(df$year,breaks=c(quantile(df$year,seq(0,1,0.25),na.rm=TRUE)),include.lowest = T ))
df$inconsistencies <- imis+iouts+ierrs
res.mout <- Moutlier( df[ ,c(2,3,5,8)], quantile = 0.995)
par(mfrow = c(1,1))
plot( res.mout$md, res.mout$rd )
abline( h=res.mout$cutoff, lwd=2, col="red")
abline( v=res.mout$cutoff, lwd=2, col="red")
llmout <- which( ( res.mout$md > res.mout$cutoff ) & (res.mout$rd > res.mout$cutoff) )
llmout
df$mout <- 0
df$mout[ llmout ] <- 1
df$mout <- factor( df$mout, labels = c("MvOut.No","MvOut.Yes"))
res.mout$cutoff
vars_con <- c("mileage", "tax", "mpg", "years_after_sell", "inconsistencies")
vars_dis <- c("transmission", "fuelType", "engineSize", "manufacturer")
vars_res <- c("price", "Audi")
res.pca<-PCA(df[,vars_con], ind.sup = llmout)
summary(res.pca)
res.pca<-PCA(df[,vars_con], ind.sup = llmout)
res.pca<-PCA(df[,c(vars_res,vars_con)], ind.sup = llmout, quanti.sup = 1, quali.sup = 2)
dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(dis,5)
res.km$betweenss/res.km$totss   #calculate total retained intertia
table(res.km$cluster)
ff<-factor(res.km$cluster)
plot(res.pca$ind$coord[,1:2],col=ff, pch=19, main= "K-Means - 5 cluster - First Factorial Plane")
legend("bottomleft", title="K-Means", legend=levels(ff), col=1:5, pch=19, cex=0.8)
table(ff,res.hcpc$data.clust$clust)
View(var_out)
fviz_nbclust(res.pca$ind$coord[,1:2], kmeans, method = "wss")
res.km<-kmeans(res.pca$ind$coord[,1:2],4)
ff<-factor(res.km$cluster)
plot(res.pca$ind$coord[,1:2],col=ff, pch=19, main= "K-Means - 5 cluster - First Factorial Plane")
legend("bottomleft", title="K-Means", legend=levels(ff), col=1:5, pch=19, cex=0.8)
res.km$betweenss/res.km$totss   #calculate total retained intertia
table(res.km$cluster)
res.km$cluster
df$kmeans_clust <- res.km$cluster
View(df)
View(df)
length(res.km$cluster)
length(res.pca$ind$coord[,1:2])
length(res.pca$ind$coord[,1:2])/2
llmout
length(res.pca$ind$coord[,1:2])/2 + length(llmout)
res.pca<-PCA(df[,c(vars_res,vars_con)], quanti.sup = 1, quali.sup = 2)
res.pca<-PCA(df[,c(vars_res,vars_con)], quanti.sup = 1, quali.sup = 2, graph = FALSE)
fviz_nbclust(res.pca$ind$coord[,1:3], kmeans, method = "wss")
#dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(res.pca$ind$coord[,1:3],5)
res.km$betweenss/res.km$totss   #calculate total retained intertia
#dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(res.pca$ind$coord[,1:3],4)
res.km$betweenss/res.km$totss   #calculate total retained intertia
#dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(res.pca$ind$coord[,1:3],6)
res.km$betweenss/res.km$totss   #calculate total retained intertia
#dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(res.pca$ind$coord[,1:3],5)
res.km$betweenss/res.km$totss   #calculate total retained intertia
table(res.km$cluster)
ff<-factor(res.km$cluster)
plot(res.pca$ind$coord[,1:2],col=ff, pch=19, main= "K-Means - 4 cluster - First Factorial Plane")
legend("bottomleft", title="K-Means", legend=levels(ff), col=1:5, pch=19, cex=0.8)
df$kmeans_clust <- res.km$cluster
# Load Required Packages: to be increased over the course
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("effects","FactoMineR","car","missMDA","mvoutlier","chemometrics", "factoextra","RColorBrewer","ggplot2","dplyr","ggmap","ggthemes","knitr")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(requiredPackages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
library(knitr)
library(formatR)
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=70),tidy=TRUE)
setwd("C:/Users/TOREROS-II/Documents/GitHub/adei/adei/deliverable2")
#setwd("C:/Users/Arnau/Desktop/adei/deliverable2")
# Load Required Packages
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("missMDA","chemometrics","mvoutlier","effects","FactoMineR","car", "factoextra","RColorBrewer","dplyr","ggmap","ggthemes","knitr", "corrplot")
missingPackages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(missingPackages)) install.packages(missingPackages)
lapply(requiredPackages, require, character.only = TRUE)
if(!is.null(dev.list())) dev.off()  # Clear plots
rm(list=ls())                       # Clean workspace
filepath<-"C:/Users/TOREROS-II/Documents/GitHub/adei/adei/"
#filepath <- "C:/Users/Arnau/Desktop/adei/"
df<-read.table(paste0(filepath,"/sample_5000.csv"),header=T, sep=",")[c(-1)]
# dim(df)       # Displays the sample size
# names(df)     # Displays the names of the sample variables
# summary(df)
calcQ <- function(x) { # Function to calculate the different quartiles
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr )
}
countNA <- function(x) { # Function to count the NA values
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i)
}
countX <- function(x,X) { # Function to count a specific number of appearences
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i)
}
jmis<-rep(0,2*ncol(df))  # columns - variables
imis<-rep(0,nrow(df))  # rows - cars
mis1<-countNA(df)
#mis1$mis_ind   # Number of missings for the current set of cars (observations)
#mis1$mis_col   # Number of missings for the current set of variables
jouts<-rep(0,ncol(df))  # columns - variables
iouts<-rep(0,nrow(df))  # rows - cars
jerrs<-rep(0,ncol(df))  # columns - variables
ierrs<-rep(0,nrow(df))  # rows - cars
df$model<-factor(paste0(df$manufacturer,"-",df$model))
var_out<-calcQ(df$year)
llout<-which((df$year <= var_out$souti))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="year")]<-length(llout)
df[llout,"year"] <- NA
df$f.price<-factor(cut(df$price/1000,breaks=c(quantile(df$price/1000,seq(0,1,0.2),na.rm=TRUE)), labels=c("super cheap", "cheap", "expensive", "very expensive", "extremely expensive"),include.lowest = T ))
sel<-which(df$price <= 0)
jerrs[which(colnames(df)=="price")] <- length(sel)
df[which(df$price < 0), ] <- NA
var_out<-calcQ(df$price)
llout_price<-which((df$price > var_out$souts) | (df$price < var_out$souti ))
jouts[which(colnames(df)=="price")]<-length(llout_price)
iouts[llout_price] <- iouts[llout_price]+1
df$transmission <- factor( df$transmission )
df$transmission <- factor( df$transmission, levels = c("Manual","Semi-Auto","Automatic"),labels = paste0("f.Trans-",c("Manual","SemiAuto","Automatic")))
var_out<-calcQ(df$mileage)
llout_mil<-which((df$mileage<var_out$souti)|(df$mileage>var_out$souts))
iouts[llout_mil]<-iouts[llout_mil]+1
df[llout_mil,"mileage"] <- NA
df$fuelType <- factor(df$fuelType)
df$fuelType <- factor( df$fuelType, levels = c("Diesel","Petrol","Hybrid"), labels = paste0("f.Fuel-",c("Diesel","Petrol","Hybrid")))
var_out<-calcQ(df$tax)
llout<-which((df$tax <= var_out$souti & df$tax >= var_out$souts))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="tax")]<-length(llout)
df[llout, "tax"] <- NA
var_out<-calcQ(df$mpg)
llout_mpg<-which((df$mpg<var_out$souti)|(df$mpg>var_out$souts))
iouts[llout_mpg]<-iouts[llout_mpg]+1
jouts[which(colnames(df)=="mpg")]<-length(llout)
df[llout_mpg,"mpg"] <- NA
df$engineSize <- factor(df$engineSize)
sel<-which(df$engineSize==0)
ierrs[sel]<-ierrs[sel]+1 #Vector of errors per individual update
df[sel,"engineSize"]<-NA
library(missMDA)
vars_con<-c("year", "mileage", "tax", "mpg")
vars_res<-c("price", "Audi")
res.impca<-imputePCA(df[,vars_con],ncp=3)
df[,vars_con ]<-res.impca$completeObs
df$year<-round(df$year, digits=0)
df$mpg<-round(df$mpg, digits=2)
vars_dis<-c("model","transmission","fuelType","engineSize","manufacturer")
res.immca<-imputeMCA(df[,vars_dis],ncp=4)
df[ , vars_dis ]<-res.immca$completeObs
df$Audi<-ifelse(df$manufacturer == "Audi",1,0)
df$Audi<-factor(df$Audi,labels=c("No","Yes"))
df$years_after_sell <-  2022 - df$year
quants <- calcQ(df$tax)
df$f.tax<-factor(cut(df$tax, breaks=c(quants$min,quants$q1, quants$q2, quants$q3+10, quants$max), include.lowest=T))
df$f.tax <- paste0("f.tax-", df$f.tax)
df$f.mileage<-factor(cut(df$mileage,breaks=c(quantile(df$mileage,seq(0,1,0.25),na.rm=TRUE)),include.lowest = T ))
df$f.mileage <- paste0("f.mil-", df$f.mileage)
df$f.mpg<-factor(cut(df$mpg,breaks=c(quantile(df$mpg,seq(0,1,0.25),na.rm=TRUE)),include.lowest = T ))
df$f.mpg <- paste0("f.mpg-", df$f.mpg)
df$f.year<-factor(cut(df$year,breaks=c(quantile(df$year,seq(0,1,0.25),na.rm=TRUE)),include.lowest = T ))
df$inconsistencies <- imis+iouts+ierrs
res.mout <- Moutlier( df[ ,c(2,3,5,8)], quantile = 0.995)
par(mfrow = c(1,1))
plot( res.mout$md, res.mout$rd )
abline( h=res.mout$cutoff, lwd=2, col="red")
abline( v=res.mout$cutoff, lwd=2, col="red")
llmout <- which( ( res.mout$md > res.mout$cutoff ) & (res.mout$rd > res.mout$cutoff) )
llmout
df$mout <- 0
df$mout[ llmout ] <- 1
df$mout <- factor( df$mout, labels = c("MvOut.No","MvOut.Yes"))
res.mout$cutoff
vars_con <- c("mileage", "tax", "mpg", "years_after_sell", "inconsistencies")
vars_dis <- c("transmission", "fuelType", "engineSize", "manufacturer")
vars_res <- c("price", "Audi")
res.pca<-PCA(df[,vars_con], ind.sup = llmout)
summary(res.pca)
res.pca<-PCA(df[,c(vars_res,vars_con, vars_dis)], ind.sup = llmout, quanti.sup = 1, quali.sup = c(2,8:11))
#dis<-dist(res.pca$ind$coord[,1:2])
set.seed(1)
#when setting a seed before the generation of kmeans we force kmeans to generate the same result (a cluster with an inertia > 0.75)
res.km<-kmeans(res.pca$ind$coord[,1:3],5)
#res_aux<-table(res.km$cluster)
#while(res.km$betweenss/res.km$totss < 0.75 & res_aux[1]!=1979 & res_aux[2]!=547 &
#   res_aux[3]!=1159 & res_aux[4]!=1069){
#  res.km<-kmeans(res.pca$ind$coord[,1:3],5)
#  res_aux<-table(res.km$cluster)
#}
res.km$betweenss/res.km$totss   #calculate total retained inertia
table(res.km$cluster)
ff<-factor(res.km$cluster)
plot(res.pca$ind$coord[,1:3],col=ff, pch=19, main= "K-Means - 5 cluster - First Factorial Plane")
legend("bottomleft", title="K-Means", legend=levels(ff), col=1:5, pch=19, cex=0.8)
df$kmeans_clust <-0
k=5
df[-llmout,"kmeans_clust"]<-res.km$cluster
df[llmout,"kmeans_clust"]<-k+1
df$kmeans_clust <- factor(df$kmeans_clust)
# observations that are multivariant outliers will be put in cluster 6
barplot(table(df$kmeans_clust),col="darkslateblue",border="darkslateblue",main="[k-means]#observations/cluster")
res.cat <- catdes(df[c(2:12, 18:20)], num.var=14, proba=0.01)
#dis<-dist(res.pca$ind$coord[,1:2])
res.hcpc <- HCPC(res.pca,nb.clust = -1, proba = 0.01)
100*(res.hcpc$call$t$within[1]-res.hcpc$call$t$within[1:10])/(res.hcpc$call$t$within[1])   #calculate total retained inertia
# Individuals facor map
fviz_cluster(res.hcpc, geom = "point", main = "Factor map")
df$HCPC_clust <-0
k=4
df[-llmout,"HCPC_clust"]<-res.hcpc$data.clust$clust
df[llmout,"HCPC_clust"]<-k+1
df$HCPC_clust <- factor(df$HCPC_clust)
# observations that are multivariant outliers will be put in cluster 6
barplot(table(df$HCPC_clust),col="darkslateblue",border="darkslateblue",main="[HCPC]#observations/cluster")
par(mfrow=c(1,1))
llvout<-which(df$mout=="MvOut.Yes");length(llvout) #Multivariate outliers
vars_dis <- c("model","transmission","fuelType","engineSize","manufacturer","f.price","f.tax","f.mileage","f.mpg","f.year")
summary( df[-llvout,c("f.price","Audi",vars_dis,"price") ])
res.mca<-MCA(df[,c(vars_dis[c(2,5:10)]) ] )
summary(res.mca,nbelements=50, nbind=0)
###
### Clustering the individuals
### Before, you have to perform a MCA with the number of axes
### that you have decided to take into account (indicated through ncp=)
res.hcmc<-HCPC(res.mca,nb.clust=6,order=TRUE)
names(res.hcmc)
names(res.hcmc$call$t)
res.hcmc$call$t$within[1:15]
(res.hcmc$call$t$within[1]-res.hcmc$call$t$within[1:6])/res.hcmc$call$t$within[1]
(res.hcmc$call$t$within[1]-res.hcmc$call$t$within[1:10])/res.hcmc$call$t$within[1]
###
### Clustering the individuals
### Before, you have to perform a MCA with the number of axes
### that you have decided to take into account (indicated through ncp=)
res.hcmc<-HCPC(res.mca,nb.clust=-1,order=TRUE)
names(res.hcmc)
names(res.hcmc$call$t)
res.hcmc$call$t$within[1:15]
(res.hcmc$call$t$within[1]-res.hcmc$call$t$within[1:10])/res.hcmc$call$t$within[1]
df$claHCMC<-7
res.hcmc<-HCPC(res.mca,nb.clust=7,order=TRUE)
df$claHCMC<-7
df[row.names(res.hcmc$data.clust),"claHCMC"]<-res.hcmc$data.clust$clust
df$claHCMC<-factor(df$claHCMC)
levels( df$claHCMC ) <- paste0( "f.claHCMC-",levels( df$claHCMC ))
summary(res.hcmc$data.clust$clust)
table(df$claHCMC)
### Interpret clustering results
summary(res.hcmc$data.clust$clust)
### desc.var ###
### A. The description of the clusters by the variables ###
names(res.hcmc$desc.var)
res.hcmc$desc.var
### desc.var$test.chi2 ###
### A.1. The categorical variables which characterizes the clusters ###
res.hcmc$desc.var$test.chi2
barplot(table(df$HCPC_clust),col="darkslateblue",border="darkslateblue",main="[HCPC]#observations/cluster")
barplot(table(df$claHCMC),col="darkslateblue",border="darkslateblue",main="[HCPC]#observations/cluster")
### desc.var ###
### A. The description of the clusters by the variables ###
names(res.hcmc$desc.var)
res.hcmc$desc.var
res.hcpc$desc.var$test.chi2
### desc.var$category ###
### A.2. The description of each cluster by the categories ##
res.hcmc$desc.var$category
res.hcpc$desc.var$quanti.var
res.hcpc$desc.var$quanti
res.hcpc$desc.var$category
res.hcmc$desc.var$test.chi2
res.hcmc$desc.var$category
res.hcmc$desc.var$quanti.var
res.hcmc$desc.var$quanti.var
res.hcmc$desc.var$quanti.var
res.hcpc$desc.var$quanti
res.hcmc$desc.var$quanti
