library(knitr)
library(formatR)
knitr::opts_chunk$set(echo = TRUE, tidy.opts=list(width.cutoff=70),tidy=TRUE)
#setwd("C:/Users/TOREROS-II/Documents/GitHub/adei/deliverable2")
setwd("C:/Users/Arnau/Desktop/adei/deliverable2")
# Load Required Packages
options(contrasts=c("contr.treatment","contr.treatment"))
requiredPackages <- c("missMDA","chemometrics","mvoutlier","effects","FactoMineR","car", "factoextra","RColorBrewer","dplyr","ggmap","ggthemes","knitr", "corrplot")
missingPackages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(missingPackages)) install.packages(missingPackages)
lapply(requiredPackages, require, character.only = TRUE)
#filepath<-"C:/Users/TOREROS-II/Documents/GitHub/adei/"
filepath <- "C:/Users/Arnau/Desktop/adei/"
df<-read.table(paste0(filepath,"/sample_5000.csv"),header=T, sep=",")[c(-1)]
calcQ <- function(x) { # Function to calculate the different quartiles
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr )
}
countNA <- function(x) { # Function to count the NA values
mis_x <- NULL
for (j in 1:ncol(x)) {mis_x[j] <- sum(is.na(x[,j])) }
mis_x <- as.data.frame(mis_x)
rownames(mis_x) <- names(x)
mis_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {mis_i <- mis_i + as.numeric(is.na(x[,j])) }
list(mis_col=mis_x,mis_ind=mis_i)
}
countX <- function(x,X) { # Function to count a specific number of appearences
n_x <- NULL
for (j in 1:ncol(x)) {n_x[j] <- sum(x[,j]==X) }
n_x <- as.data.frame(n_x)
rownames(n_x) <- names(x)
nx_i <- rep(0,nrow(x))
for (j in 1:ncol(x)) {nx_i <- nx_i + as.numeric(x[,j]==X) }
list(nx_col=n_x,nx_ind=nx_i)
}
jmis<-rep(0,2*ncol(df))  # columns - variables
mis1<-countNA(df)
#mis1$mis_ind   # Number of missings for the current set of cars (observations)
#mis1$mis_col   # Number of missings for the current set of variables
jouts<-rep(0,ncol(df))  # columns - variables
jerrs<-rep(0,ncol(df))  # columns - variables
sel<-which(df$price <= 0)
jerrs[which(colnames(df)=="price")] <- length(sel)
df <- df[which(df$price > 0), ]
var_out<-calcQ(df$price)
llout_price<-which((df$price > var_out$souts) | (df$price < var_out$souti ))
jouts[which(colnames(df)=="price")]<-length(llout_price)
df <- df[-llout_price, ]
imis<-rep(0,nrow(df))  # rows - cars
iouts<-rep(0,nrow(df))  # rows - cars
ierrs<-rep(0,nrow(df))  # rows - cars
df$model<-factor(paste0(df$manufacturer,"-",df$model))
var_out<-calcQ(df$year)
llout<-which((df$year <= var_out$souti))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="year")]<-length(llout)
df[llout,"year"] <- NA
df$price_type <- df$price
df$price_type[which(df$price >= var_out$min & df$price_type < var_out$q1)] <- "super cheap"
df$price_type[which(df$price >= var_out$q1 & df$price_type < var_out$q2)] <- "cheap"
df$price_type[which(df$price >= var_out$q2 & df$price_type < var_out$q3)] <- "expensive"
df$price_type[which(df$price >= var_out$q3 & df$price_type < var_out$mouts)] <- "very expensive"
df$price_type[which(df$price >= var_out$mouts )] <- "extremely expensive"
df$transmission <- factor( df$transmission )
df$transmission <- factor( df$transmission, levels = c("Manual","Semi-Auto","Automatic"),labels = paste0("f.Trans-",c("Manual","SemiAuto","Automatic")))
var_out<-calcQ(df$mileage)
llout_mil<-which((df$mileage<var_out$souti)|(df$mileage>var_out$souts))
iouts[llout_mil]<-iouts[llout_mil]+1
df[llout_mil,"mileage"] <- NA
df$fuelType <- factor(df$fuelType)
df$fuelType <- factor( df$fuelType, levels = c("Diesel","Petrol","Hybrid"), labels = paste0("f.Fuel-",c("Diesel","Petrol","Hybrid")))
var_out<-calcQ(df$tax)
llout<-which((df$tax <= var_out$souti & df$tax >= var_out$souts))
iouts[llout] <- iouts[llout]+1
jouts[which(colnames(df)=="tax")]<-length(llout)
df[llout, "tax"] <- NA
var_out<-calcQ(df$mpg)
llout_mpg<-which((df$mpg<var_out$souti)|(df$mpg>var_out$souts))
iouts[llout_mpg]<-iouts[llout_mpg]+1
jouts[which(colnames(df)=="mpg")]<-length(llout)
df[llout_mpg,"mpg"] <- NA
df$engineSize <- factor(df$engineSize)
sel<-which(df$engineSize==0)
ierrs[sel]<-ierrs[sel]+1 #Vector of errors per individual update
df[sel,"engineSize"]<-NA
library(missMDA)
vars_con<-c("year", "mileage", "tax", "mpg")
vars_res<-c("price", "Audi")
res.impca<-imputePCA(df[,vars_con],ncp=3)
df[,vars_con ]<-res.impca$completeObs
vars_dis<-c("model","transmission","fuelType","engineSize","manufacturer")
res.immca<-imputeMCA(df[,vars_dis],ncp=4)
df[ , vars_dis ]<-res.immca$completeObs
df$Audi<-ifelse(df$manufacturer == "Audi",1,0)
df$Audi<-factor(df$Audi,labels=c("No","Yes"))
df$years_after_sell <-  2022 - df$year
quants <- calcQ(df$tax)
df$f.tax<-factor(cut(df$tax, breaks=c(quants$min,quants$q1, quants$q2, quants$q3+10, quants$max), include.lowest=T))
df$f.mileage<-factor(cut(df$mileage,breaks=c(quantile(df$mileage,seq(0,1,0.25),na.rm=TRUE)),include.lowest = T ))
df$f.mpg<-factor(cut(df$mpg,breaks=c(quantile(df$mpg,seq(0,1,0.25),na.rm=TRUE)),include.lowest = T ))
df$f.year<-factor(cut(df$year,breaks=c(quantile(df$year,seq(0,1,0.25),na.rm=TRUE)),include.lowest = T ))
df$inconsistencies <- imis+iouts+ierrs
res.mout <- Moutlier( df[ ,c(2,3,5,8)], quantile = 0.995)
par(mfrow = c(1,1))
plot( res.mout$md, res.mout$rd )
abline( h=res.mout$cutoff, lwd=2, col="red")
abline( v=res.mout$cutoff, lwd=2, col="red")
llmout <- which( ( res.mout$md > res.mout$cutoff ) & (res.mout$rd > res.mout$cutoff) )
llmout
df$mout <- 0
df$mout[ llmout ] <- 1
df$mout <- factor( df$mout, labels = c("MvOut.No","MvOut.Yes"))
res.mout$cutoff
vars_con <- c("mileage", "tax", "mpg", "years_after_sell", "inconsistencies")
vars_dis <- c("transmission", "fuelType", "engineSize", "manufacturer")
vars_res <- c("price", "Audi")
res.pca<-PCA(df[,vars_con], ind.sup = llmout)
summary(res.pca)
res.pca<-PCA(df[,vars_con], ind.sup = llmout)
res.pca<-PCA(df[,c(vars_res,vars_con)], ind.sup = llmout, quanti.sup = 1, quali.sup = 2)
dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(dis,5)
res.km$betweenss/res.km$totss   #calculate total retained intertia
table(res.km$cluster)
ff<-factor(res.km$cluster)
plot(res.pca$ind$coord[,1:2],col=ff, pch=19, main= "K-Means - 5 cluster - First Factorial Plane")
legend("bottomleft", title="K-Means", legend=levels(ff), col=1:5, pch=19, cex=0.8)
table(ff,res.hcpc$data.clust$clust)
View(var_out)
fviz_nbclust(res.pca$ind$coord[,1:2], kmeans, method = "wss")
res.km<-kmeans(res.pca$ind$coord[,1:2],4)
ff<-factor(res.km$cluster)
plot(res.pca$ind$coord[,1:2],col=ff, pch=19, main= "K-Means - 5 cluster - First Factorial Plane")
legend("bottomleft", title="K-Means", legend=levels(ff), col=1:5, pch=19, cex=0.8)
res.km$betweenss/res.km$totss   #calculate total retained intertia
table(res.km$cluster)
res.km$cluster
df$kmeans_clust <- res.km$cluster
View(df)
View(df)
length(res.km$cluster)
length(res.pca$ind$coord[,1:2])
length(res.pca$ind$coord[,1:2])/2
llmout
length(res.pca$ind$coord[,1:2])/2 + length(llmout)
res.pca<-PCA(df[,c(vars_res,vars_con)], quanti.sup = 1, quali.sup = 2)
res.pca<-PCA(df[,c(vars_res,vars_con)], quanti.sup = 1, quali.sup = 2, graph = FALSE)
fviz_nbclust(res.pca$ind$coord[,1:3], kmeans, method = "wss")
#dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(res.pca$ind$coord[,1:3],5)
res.km$betweenss/res.km$totss   #calculate total retained intertia
#dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(res.pca$ind$coord[,1:3],4)
res.km$betweenss/res.km$totss   #calculate total retained intertia
#dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(res.pca$ind$coord[,1:3],6)
res.km$betweenss/res.km$totss   #calculate total retained intertia
#dis<-dist(res.pca$ind$coord[,1:2])
res.km<-kmeans(res.pca$ind$coord[,1:3],5)
res.km$betweenss/res.km$totss   #calculate total retained intertia
table(res.km$cluster)
ff<-factor(res.km$cluster)
plot(res.pca$ind$coord[,1:2],col=ff, pch=19, main= "K-Means - 4 cluster - First Factorial Plane")
legend("bottomleft", title="K-Means", legend=levels(ff), col=1:5, pch=19, cex=0.8)
df$kmeans_clust <- res.km$cluster
